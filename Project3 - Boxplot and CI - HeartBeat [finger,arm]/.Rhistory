d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
d1
d1.head
head(d1)
summary(d1)
summary(d3)
sd(d1)
ztable
plot(heartbeatdata)
#Load the data
heartbeatdata <- read.table("bp.txt", header = T, sep = "\t")
# Get the  summary of the database
summary(heartbeatdata)
#     armsys         fingsys
#Min.   : 79.0   Min.   : 60.0
#1st Qu.:111.5   1st Qu.:118.0
#Median :125.0   Median :130.0
#Mean   :128.5   Mean   :132.8
#3rd Qu.:140.0   3rd Qu.:146.5
#Max.   :220.0   Max.   :228.0
#
#standard Deviation
sd(heartbeatdata$armsys)
sd(heartbeatdata$fingsys)
#side by side box plot.
boxplot(heartbeatdata, main="Boxplot of Arm and Finger Method")
plot(heartbeatdata)
setwd("C:/Users/Akhilesh/Desktop/Akhilesh Graduate studies/Sem 2/SPDS/e learning/Mini Project/MiniProject3")
#Load the data
heartbeatdata <- read.table("bp.txt", header = T, sep = "\t")
# Get the  summary of the database
summary(heartbeatdata)
#     armsys         fingsys
#Min.   : 79.0   Min.   : 60.0
#1st Qu.:111.5   1st Qu.:118.0
#Median :125.0   Median :130.0
#Mean   :128.5   Mean   :132.8
#3rd Qu.:140.0   3rd Qu.:146.5
#Max.   :220.0   Max.   :228.0
#
#standard Deviation
sd(heartbeatdata$armsys)
sd(heartbeatdata$fingsys)
#side by side box plot.
boxplot(heartbeatdata, main="Boxplot of Arm and Finger Method")
plot(heartbeatdata)
plot(x=y)
if(i>rtimes){
break
}
break
coverageCount = 0
#estimate Pestimate for the given size and probabilty
covergenceProbaility <- function(size,prob) {
#repeat 200 times the binomial with a given size and prob
rtimes = 1000
a=replicate(rtimes,rbinom(size,1,prob))
# repeat for the 1000 times finding the Confidence interval
i=1
repeat{
if(i>rtimes){
break
}
#estimate Pestimate for the given sample size n and Probability p
Pestimate=c()
pages = 1:size
Pestimate[i]= length(pages[a[,i]==1])/size
#find CI for the estimated Pestimate upper and lower limit.
ci_upper = Pestimate[i] + (qnorm(0.975) * sqrt((Pestimate[i]*(1-Pestimate[i]))/size))
ci_lower = Pestimate[i] - (qnorm(0.975) * sqrt((Pestimate[i]*(1-Pestimate[i]))/size))
#find the coverage probability
# if the prob is within with the range then update the count.
if(ci_lower <= prob && prob <= ci_upper ){
coverageCount=coverageCount+1
}
i=i+1
}
# coverage probabilty count to 100.
coverageProbability = (coverageCount/rtimes)*100
return(coverageProbability)
}
#list of sizes
sizes = c(5,10,30,50,100)
#list of probabilities
probs = c(0.05,0.1,0.25,0.3,0.5,0.7,0.75,0.9,0.95)
#prepare a dataframe
df = data.frame(cp=0,prob=0,size=0)
#compute data for all sizes and probs
for(size in sizes)
{
for(prob in probs)
{
res <- covergenceProbaility(size,prob)
df<-rbind(df,c(res,prob,size))
}
}
# plot it side by side
par(mfrow=c(1,2))
plot(df$prob, df$cp,xlab="probability",ylab="coverage probability")
plot(df$size, df$cp,xlab="size",ylab="coverage probability")
par(mfrow=c(1,1))
# plot the big graph.
#plot(df)
coverageCount = 0
#estimate Pestimate for the given size and probabilty
covergenceProbaility <- function(size,prob) {
#repeat 200 times the binomial with a given size and prob
rtimes = 1000
a=replicate(rtimes,rbinom(size,1,prob))
# repeat for the 1000 times finding the Confidence interval
i=1
repeat{
if(i>rtimes){
break
}
#estimate Pestimate for the given sample size n and Probability p
Pestimate=c()
pages = 1:size
Pestimate[i]= length(pages[a[,i]==1])/size
#find CI for the estimated Pestimate upper and lower limit.
ci_upper = Pestimate[i] + (qnorm(0.975) * sqrt((Pestimate[i]*(1-Pestimate[i]))/size))
ci_lower = Pestimate[i] - (qnorm(0.975) * sqrt((Pestimate[i]*(1-Pestimate[i]))/size))
#find the coverage probability
# if the prob is within with the range then update the count.
if(ci_lower <= prob && prob <= ci_upper ){
coverageCount=coverageCount+1
}
i=i+1
}
# coverage probabilty count to 100.
coverageProbability = (coverageCount/rtimes)*100
return(coverageProbability)
}
#list of sizes
sizes = c(5,10,30,50,60,70,80,90,100)
#list of probabilities
probs = c(0.05,0.1,0.25,0.3,0.5,0.7,0.75,0.9,0.95)
#prepare a dataframe
df = data.frame(cp=0,prob=0,size=0)
#compute data for all sizes and probs
for(size in sizes)
{
for(prob in probs)
{
res <- covergenceProbaility(size,prob)
df<-rbind(df,c(res,prob,size))
}
}
# plot it side by side
par(mfrow=c(1,2))
plot(df$prob, df$cp,xlab="probability",ylab="coverage probability")
plot(df$size, df$cp,xlab="size",ylab="coverage probability")
par(mfrow=c(1,1))
# plot the big graph.
#plot(df)
coverageCount = 0
#estimate Pestimate for the given size and probabilty
covergenceProbaility <- function(size,prob) {
#repeat 200 times the binomial with a given size and prob
rtimes = 1000
a=replicate(rtimes,rbinom(size,1,prob))
# repeat for the 1000 times finding the Confidence interval
i=1
repeat{
if(i>rtimes){
break
}
#estimate Pestimate for the given sample size n and Probability p
Pestimate=c()
pages = 1:size
Pestimate[i]= length(pages[a[,i]==1])/size
#find CI for the estimated Pestimate upper and lower limit.
ci_upper = Pestimate[i] + (qnorm(0.975) * sqrt((Pestimate[i]*(1-Pestimate[i]))/size))
ci_lower = Pestimate[i] - (qnorm(0.975) * sqrt((Pestimate[i]*(1-Pestimate[i]))/size))
#find the coverage probability
# if the prob is within with the range then update the count.
if(ci_lower <= prob && prob <= ci_upper ){
coverageCount=coverageCount+1
}
i=i+1
}
# coverage probabilty count to 100.
coverageProbability = (coverageCount/rtimes)*100
return(coverageProbability)
}
#list of sizes
sizes = c(5,10,30,50,60,70,80,90,100,110,120,130)
#list of probabilities
probs = c(0.05,0.1,0.25,0.3,0.5,0.7,0.75,0.9,0.95)
#prepare a dataframe
df = data.frame(cp=0,prob=0,size=0)
#compute data for all sizes and probs
for(size in sizes)
{
for(prob in probs)
{
res <- covergenceProbaility(size,prob)
df<-rbind(df,c(res,prob,size))
}
}
# plot it side by side
par(mfrow=c(1,2))
plot(df$prob, df$cp,xlab="probability",ylab="coverage probability")
plot(df$size, df$cp,xlab="size",ylab="coverage probability")
par(mfrow=c(1,1))
# plot the big graph.
#plot(df)
a = c(0.05)
repeat(20){ a=c(a,0.05)}
repeat(20) a=c(a,0.05)
i = 1
for(i=<20){}
while(i<20)
{}
qt(c(.025, .975), df=5)
#
# sample size computation for mean
#
alpha <- 0.01
w <- 2*0.5
sigma <- 1.5
n <- ceiling((2*qnorm(1-(alpha/2))*sigma/w)^2)
# # > n
# [1] 60
# >
#
# N(0, 1) vs t_k distributions
#
curve(dnorm(x), from = -4, to = 4, col = "black", ylab = " ")
curve(dt(x, df = 2), from = -4, to = 4, col = "pink", add = T)
curve(dt(x, df = 10), from = -4, to = 4, col = "purple", add = T)
curve(dt(x, df = 30), from = -4, to = 4, col = "red", add = T)
legend("topright", legend = c("N(0, 1)", "t_2", "t_10", "t_30"),
col = c("black", "pink", "purple", "red"), lty = 1)
title("N(0, 1) vs t_k densities")
#
# unauthorized access example
#
x <- c(0.46, 0.38, 0.31, 0.24, 0.20, 0.31, 0.34, 0.42, 0.09, 0.18, 0.46, 0.21)
alpha <- 1-0.95
n <- length(x)
round(mean(x) + c(-1,1)*qt(1-(alpha/2), df = (n-1)) * sd(x)/sqrt(n), 2)
# > round(mean(x) + c(-1,1)*qt(1-(alpha/2), df = (n-1))*sd(x)/sqrt(n), 2)
# [1] 0.22 0.38
# >
#
# execution time example
#
n <- 35
xmean <- 230
xsd <- 14
alpha <- 0.05
xmean + c(-1, 1)*qnorm(1-(alpha/2)) * (xsd/sqrt(n))
# > xmean + c(-1, 1)*qnorm(1-(alpha/2))*xsd/sqrt(n)
# [1] 225.3619 234.6381
# >
#
# RAM chips example
#
n <- 50
phat <- 20/50
alpha <- 0.05
se.phat <- sqrt(phat * (1-phat)/n)
phat + c(-1, 1)*qnorm(1-(alpha/2))*se.phat
# > phat + c(-1, 1)*qnorm(1-(alpha/2))*se.phat
# [1] 0.2642097 0.5357903
# >
#
# sample size computation for proportion
#
alpha <- 0.05
w <- 2*0.03
ceiling((qnorm(1-(alpha/2))/w)^2)
# > ceiling((qnorm(1-(alpha/2))/w)^2)
# [1] 1068
# >
curve(dnorm(x), from = -4, to = 4, col = "black", ylab = " ")
curve(dt(x, df = 2), from = -4, to = 4, col = "pink", add = T)
??dt
curve(dnorm(x), from = -4, to = 4, col = "black", ylab = " ")
curve(dt(x, df = 2), from = -4, to = 4, col = "pink", add = T)
curve(dt(x, df = 10), from = -4, to = 4, col = "purple", add = T)
curve(dt(x, df = 30), from = -4, to = 4, col = "red", add = T)
legend("topright", legend = c("N(0, 1)", "t_2", "t_10", "t_30"),
col = c("black", "pink", "purple", "red"), lty = 1)
title("N(0, 1) vs t_k densities")
